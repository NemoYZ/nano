#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])

#IncludeRegexScan: ^.*$

#IncludeRegexComplain: ^$

#IncludeRegexTransform: 

../include/algo.h
stdint.h
-
iterator
-

../include/algorithm.h
algorithm
-
concepts
-
heap_algo.h
../include/heap_algo.h
type_traits.h
../include/type_traits.h
algo.h
../include/algo.h
mini_vector.h
../include/mini_vector.h
assert.h
-

../include/allocator.h
cstddef
-
construct.h
../include/construct.h

../include/avl_tree.h
iterator
-
functional
-
iostream
-
string
-
queue
-
algorithm.h
../include/algorithm.h
tree.h
../include/tree.h
allocator.h
../include/allocator.h
type_traits.h
../include/type_traits.h

../include/construct.h
utility
-
iterator
-

../include/heap_algo.h
functional
-
iterator
-

../include/mini_vector.h
string.h
-
vector
-
initializer_list
-
concepts
-
allocator.h
../include/allocator.h
type_traits.h
../include/type_traits.h
algo.h
../include/algo.h

../include/node.h

../include/tree.h
utility.h
../include/utility.h
tree_node.h
../include/tree_node.h
stdint.h
-
algorithm
-
unistd.h
-

../include/tree_node.h
node.h
../include/node.h
stdint.h
-

../include/type_traits.h
type_traits
-

../include/utility.h
utility
-
chrono
-
string.h
-

/programs/nano/tests/avl_tree_test.cc
avl_tree.h
/programs/nano/tests/avl_tree.h
iostream
-
random
-
vector
-
time.h
-
algorithm
-
assert.h
-
functional
-
set
-
vector
-

